// Place your key bindings in this file to override the defaults
[
    {
        "key": "ctrl+h",
        "command": "workbench.action.navigateLeft",
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.navigateDown",
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.navigateUp",
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.navigateRight",
    },
    {
        "key": "space ,",
        "command": "workbench.action.showAllEditors",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    { 
        "key": "space e",
        "command": "workbench.action.toggleSidebarVisibility", 
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
    },
    {
        "key": "tab",
        "command": "workbench.action.nextEditorInGroup",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
    },
    {
        "key": "shift+tab",
        "command": "workbench.action.previousEditorInGroup",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
    },
    {
        "key": "shift+j",
        "command": "editor.action.moveLinesDownAction",
        "when": "vim.mode != 'Insert' && editorTextFocus"
    },
    {
        "key": "shift+k",
        "command": "editor.action.moveLinesUpAction",
        "when": "vim.mode != 'Insert' && editorTextFocus"
    },
    {
        "key": "space g", // Consider "space g g" for "go to git" if you want to allow goto reference and definition to be a "space g" chord.
        "command":"workbench.scm.action.focusNextResourceGroup",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
    },
    {
        "key": "space t",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
    },
    
    // Some key bindings I am not sure about.
    {
        "key": "shift+k",
        "command": "editor.action.showHover",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space c a",
        "command": "editor.action.codeAction",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space c r",
        "command": "editor.action.rename",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space c s",
        "command": "workbench.action.gotoSymbol",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space b d",
        "command": "workbench.action.closeActiveEditor",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space space",
        "command": "workbench.action.quickOpen",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space d", // This used to be "space g d" for goto definition. 
        "command": "editor.action.revealDefinition",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space r", // This used to be "space g r" for goto reference.
        "command": "editor.action.goToReferences",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space f",
        "command": "workbench.action.findInFiles",
        "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
    },

    // SCM Commands
    {
        "key": "m",
        "command": "workbench.scm.action.focusNextInput",
        "when": "sideBarFocus && workbench.scm.active && !inputFocus"
    },
    {
        "key": "Escape",
        "command": "workbench.scm.action.focusNextResourceGroup",
        "when": "scmRepository && !editorHasSelection && !suggestWidgetVisible"
    },
    {
        "key": "x",
        "command": "list.toggleSelection",
        "when": "sideBarFocus && workbench.scm.active && !inputFocus"
    }, 
    {
        "key": "shift+j",
        "command": "list.expandSelectionDown",
        "when": "sideBarFocus && workbench.scm.active && !inputFocus"
    }, 
    {
        "key": "shift+k",
        "command": "list.expandSelectionUp",
        "when": "sideBarFocus && workbench.scm.active && !inputFocus"
    },

    // Diff Navigation
    {
        "key": "space j",
        "command": "workbench.action.compareEditor.nextChange",
        "when": "vim.mode == 'Normal' && editorTextFocus && textCompareEditorActive"
    },
    {
        "key": "space k",
        "command": "workbench.action.compareEditor.previousChange",
        "when": "vim.mode == 'Normal' && editorTextFocus && textCompareEditorActive"
    },
    {
        "key": "space h",
        "command": "workbench.action.compareEditor.focusOtherSide",
        "when": "vim.mode == 'Normal' && textCompareEditorActive"
    },
    {
        "key": "space s",
        "command": "git.stageSelectedRanges",
        "when": "(vim.mode == 'Visual' || vim.mode == 'VisualLine' || vim.mode == 'VisualBlock') && textCompareEditorActive"
    },
    {
        "key": "space u",
        "command": "git.unstageSelectedRanges",
        "when": "(vim.mode == 'Visual' || vim.mode == 'VisualLine' || vim.mode == 'VisualBlock') && textCompareEditorActive"
    },
    // Terminal Navigation
    {
        "key": "ctrl+`",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+alt+k",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+alt+j",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+alt+n",
        "command": "workbench.action.terminal.new",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+alt+w",
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus"
    },

    // Quick Open Navigation
    {
        "key": "alt+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "alt+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
]